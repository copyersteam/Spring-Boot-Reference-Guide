"use strict";(self.webpackChunkspring=self.webpackChunkspring||[]).push([[70607],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},u=Object.keys(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(n=0;n<u.length;n++)r=u[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,u=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),f=c(r),m=o,d=f["".concat(i,".").concat(m)]||f[m]||l[m]||u;return r?n.createElement(d,a(a({ref:t},s),{},{components:r})):n.createElement(d,a({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var u=r.length,a=new Array(u);a[0]=f;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var c=2;c<u;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},85301:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return l}});var n=r(87462),o=r(63366),u=(r(67294),r(3905)),a=["components"],p={},i=void 0,c={unversionedId:"IV. Spring Boot features/43.4.3 OutputCapture",id:"IV. Spring Boot features/43.4.3 OutputCapture",title:"43.4.3 OutputCapture",description:"43.4.3 OutputCapture",source:"@site/docs/IV. Spring Boot features/43.4.3 OutputCapture.md",sourceDirName:"IV. Spring Boot features",slug:"/IV. Spring Boot features/43.4.3 OutputCapture",permalink:"/Spring-Boot-Reference-Guide/docs/IV. Spring Boot features/43.4.3 OutputCapture",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IV. Spring Boot features/43.4.3 OutputCapture.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"43.4.2 EnvironmentTestUtils",permalink:"/Spring-Boot-Reference-Guide/docs/IV. Spring Boot features/43.4.2 EnvironmentTestUtils"},next:{title:"43.4.4 TestRestTemplate",permalink:"/Spring-Boot-Reference-Guide/docs/IV. Spring Boot features/43.4.4 TestRestTemplate"}},s={},l=[{value:"43.4.3 OutputCapture",id:"4343-outputcapture",level:3}],f={toc:l};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,u.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,u.kt)("h3",{id:"4343-outputcapture"},"43.4.3 OutputCapture"),(0,u.kt)("p",null,(0,u.kt)("inlineCode",{parentName:"p"},"OutputCapture"),"\u662fJUnit\u7684\u4e00\u4e2a",(0,u.kt)("inlineCode",{parentName:"p"},"Rule"),"\uff0c\u7528\u4e8e\u6355\u83b7",(0,u.kt)("inlineCode",{parentName:"p"},"System.out"),"\u548c",(0,u.kt)("inlineCode",{parentName:"p"},"System.err"),"\u8f93\u51fa\u3002\u4f60\u53ef\u4ee5\u5c06",(0,u.kt)("inlineCode",{parentName:"p"},"@Rule"),"\u6ce8\u89e3capture\uff0c\u7136\u540e\u5728\u65ad\u8a00\u4e2d\u8c03\u7528",(0,u.kt)("inlineCode",{parentName:"p"},"toString()"),"\u3002\u5982\u4e0b\u6240\u793a\uff1a"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-java"},'import org.junit.Rule;\nimport org.junit.Test;\nimport org.springframework.boot.test.rule.OutputCapture;\n\nimport static org.hamcrest.Matchers.*;\nimport static org.junit.Assert.*;\n\npublic class MyTest {\n\n    @Rule\n    public OutputCapture capture = new OutputCapture();\n\n    @Test\n    public void testName() throws Exception {\n        System.out.println("Hello World!");\n        assertThat(capture.toString(), containsString("World"));\n    }\n\n}\n')))}m.isMDXComponent=!0}}]);