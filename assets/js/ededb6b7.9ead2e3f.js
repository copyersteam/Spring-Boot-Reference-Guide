"use strict";(self.webpackChunkspring=self.webpackChunkspring||[]).push([[68180],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),m=o,f=g["".concat(p,".").concat(m)]||g[m]||l[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},20567:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return l}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],s={},p=void 0,u={unversionedId:"IV. Spring Boot features/43.3.4 Testing with a running server",id:"IV. Spring Boot features/43.3.4 Testing with a running server",title:"43.3.4 Testing with a running server",description:"43.3.4 \u4f7f\u7528\u8fd0\u884c\u7684\u670d\u52a1\u5668\u6d4b\u8bd5",source:"@site/docs/IV. Spring Boot features/43.3.4 Testing with a running server.md",sourceDirName:"IV. Spring Boot features",slug:"/IV. Spring Boot features/43.3.4 Testing with a running server",permalink:"/Spring-Boot-Reference-Guide/docs/IV. Spring Boot features/43.3.4 Testing with a running server",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/IV. Spring Boot features/43.3.4 Testing with a running server.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"43.3.3 Excluding Test Configuration",permalink:"/Spring-Boot-Reference-Guide/docs/IV. Spring Boot features/43.3.3 Excluding Test Configuration"},next:{title:"43.3.5 Mocking and Spying Beans",permalink:"/Spring-Boot-Reference-Guide/docs/IV. Spring Boot features/43.3.5 Mocking and Spying Beans"}},c={},l=[{value:"43.3.4 \u4f7f\u7528\u8fd0\u884c\u7684\u670d\u52a1\u5668\u6d4b\u8bd5",id:"4334-\u4f7f\u7528\u8fd0\u884c\u7684\u670d\u52a1\u5668\u6d4b\u8bd5",level:3}],g={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"4334-\u4f7f\u7528\u8fd0\u884c\u7684\u670d\u52a1\u5668\u6d4b\u8bd5"},"43.3.4 \u4f7f\u7528\u8fd0\u884c\u7684\u670d\u52a1\u5668\u6d4b\u8bd5"),(0,i.kt)("p",null,"\u5982\u679c\u4f60\u9700\u8981\u542f\u52a8\u4e00\u4e2a\u5b8c\u6574\u8fd0\u884c\u7684\u670d\u52a1\u5668\uff0c\u6211\u4eec\u5efa\u8bae\u4f60\u4f7f\u7528\u968f\u673a\u7aef\u53e3\u3002\u5982\u679c\u4f60\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)"),"\uff0c\u6bcf\u6b21\u8fd0\u884c\u6d4b\u8bd5\u90fd\u4f1a\u4e3a\u4f60\u5206\u914d\u4e00\u4e2a\u53ef\u7528\u7684\u968f\u673a\u7aef\u53e3\u3002"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@LocalServerPort"),"\u6ce8\u89e3\u7528\u4e8e",(0,i.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/2.0.0.RELEASE/reference/htmlsingle/#howto-discover-the-http-port-at-runtime"},"\u6ce8\u5165\u6d4b\u8bd5\u7528\u4f8b\u5b9e\u9645\u4f7f\u7528\u7684\u7aef\u53e3"),"\uff0c\u7b80\u5355\u8d77\u89c1\uff0c\u9700\u8981\u53d1\u8d77REST\u8c03\u7528\u5230\u542f\u52a8\u670d\u52a1\u5668\u7684\u6d4b\u8bd5\u53ef\u4ee5\u989d\u5916",(0,i.kt)("inlineCode",{parentName:"p"},"@Autowire"),"\u4e00\u4e2a",(0,i.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/testing.html#webtestclient-tests"},(0,i.kt)("inlineCode",{parentName:"a"},"WebTestClient")),"\uff0c\u5b83\u53ef\u4ee5\u89e3\u6790\u5230\u8fd0\u884c\u670d\u52a1\u5668\u7684\u76f8\u5173\u94fe\u63a5\uff0c\u5e76\u4e14\u5e26\u6709\u9a8c\u8bc1\u54cd\u5e94\u7684\u4e13\u7528API\u3002\u5982\u4e0b\u6240\u793a\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.web.reactive.server.WebTestClient;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\npublic class RandomPortWebTestClientExampleTests {\n\n    @Autowired\n    private WebTestClient webClient;\n\n    @Test\n    public void exampleTest() {\n        this.webClient.get().uri("/").exchange().expectStatus().isOk()\n                .expectBody(String.class).isEqualTo("Hello World");\n    }\n\n}\n')),(0,i.kt)("p",null,"Spring Boot\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"TestRestTemplate"),"\u8bbe\u65bd\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\npublic class RandomPortTestRestTemplateExampleTests {\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    @Test\n    public void exampleTest() {\n        String body = this.restTemplate.getForObject("/", String.class);\n        assertThat(body).isEqualTo("Hello World");\n    }\n\n}\n')))}m.isMDXComponent=!0}}]);